import React, { useMemo, useState } from "react";
import { KINDS } from "@shared/constants/kinds";
import "../styles/KindPicker.css";

export default function KindPicker({ value, onChange }) {
  const [query, setQuery] = useState("");

  const items = useMemo(() => {
    // List of available question kinds
    const iconOf = (kind) => {
      switch (kind) {
        case "mcq_single":
          return "‚òëÔ∏è";
        case "fib_single":
          return "üìù";
        case "image_choice":
          return "üñºÔ∏è";
        case "multiple_fill_in":
          return "üî°";
        case "vertical_calculation":
          return "üßÆ";
        case "expression":
          return "‚àë";
        case "matching_pairs":
          return "üîó";
        default:
          return "‚ùì";
      }
    };
    const nameOf = (kind) => {
      switch (kind) {
        case "mcq_single":
          return "Tr·∫Øc nghi·ªám 1 ƒë√°p √°n";
        case "fib_single":
          return "ƒêi·ªÅn 1 √¥ tr·ªëng";
        case "image_choice":
          return "Tr·∫Øc nghi·ªám h√¨nh ·∫£nh";
        case "multiple_fill_in":
          return "ƒêi·ªÅn nhi·ªÅu √¥ tr·ªëng";
        case "vertical_calculation":
          return "Ph√©p t√≠nh theo c·ªôt";
        case "expression":
          return "Bi·ªÉu th·ª©c to√°n";
        case "matching_pairs":
          return "Gh√©p c·∫∑p ƒë√°p √°n";
        default:
          return kind;
      }
    };
    const descOf = (kind) => {
      switch (kind) {
        case "mcq_single":
          return "C√¢u h·ªèi v·ªõi nhi·ªÅu l·ª±a ch·ªçn, ch·ªçn 1 ƒë√°p √°n ƒë√∫ng";
        case "fib_single":
          return "C√¢u h·ªèi y√™u c·∫ßu ƒëi·ªÅn ƒë√°p √°n v√†o √¥ tr·ªëng";
        case "image_choice":
          return "C√¢u h·ªèi v·ªõi c√°c l·ª±a ch·ªçn l√† h√¨nh ·∫£nh";
        case "multiple_fill_in":
          return "C√¢u h·ªèi c√≥ nhi·ªÅu √¥ tr·ªëng c·∫ßn ƒëi·ªÅn";
        case "vertical_calculation":
          return "Ph√©p t√≠nh c·ªông/tr·ª´ theo chi·ªÅu d·ªçc";
        case "expression":
          return "Bi·ªÉu th·ª©c v·ªõi c√°c ph√©p t√≠nh (+, -, √ó, √∑)";
        case "matching_pairs":
          return "Gh√©p c√°c item t·ª´ 2 c·ªôt v·ªõi nhau";
        default:
          return "";
      }
    };
    // All available kinds from KINDS constant
    const allKinds = Object.values(KINDS);
    return allKinds.map((kind) => ({
      value: kind,
      label: nameOf(kind),
      icon: iconOf(kind),
      description: descOf(kind),
      tags: [kind],
    }));
  }, []);

  const filtered = useMemo(() => {
    const q = query.trim().toLowerCase();
    if (!q) return items;
    return items.filter(
      (it) =>
        it.label.toLowerCase().includes(q) ||
        it.value.toLowerCase().includes(q) ||
        (it.tags || []).some((t) => t.toLowerCase().includes(q))
    );
  }, [items, query]);

  return (
    <div className="kp-container">
      <div className="kp-search">
        <input
          className="kp-search-input"
          placeholder="T√¨m d·∫°ng c√¢u h·ªèi..."
          value={query}
          onChange={(e) => setQuery(e.target.value)}
        />
      </div>
      <div className="kp-grid">
        {filtered.map((k) => (
          <button
            key={k.value}
            type="button"
            className={`kp-card ${value === k.value ? "kp-card--active" : ""}`}
            onClick={() => onChange && onChange(k.value)}
          >
            <div className="kp-card-head">
              <div className="kp-card-icon">{k.icon}</div>
              <div className="kp-card-title">{k.label}</div>
            </div>
            {k.description && (
              <div className="kp-card-desc">{k.description}</div>
            )}
          </button>
        ))}
        {filtered.length === 0 && (
          <div className="kp-empty col-span-2">Kh√¥ng t√¨m th·∫•y d·∫°ng ph√π h·ª£p</div>
        )}
      </div>
    </div>
  );
}
